; ModuleID = 'example.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque

@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@stdin = external dso_local global %struct._IO_FILE*, align 8
@.str.1 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"%d\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @testcase(i32 %0) #0 !dbg !10 {
  %2 = alloca i32, align 4
  %3 = alloca [10 x i8], align 1
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !14, metadata !DIExpression()), !dbg !15
  call void @llvm.dbg.declare(metadata [10 x i8]* %3, metadata !16, metadata !DIExpression()), !dbg !20
  call void @llvm.dbg.declare(metadata i8** %4, metadata !21, metadata !DIExpression()), !dbg !22
  %6 = load i32, i32* %2, align 4, !dbg !23
  %7 = sext i32 %6 to i64, !dbg !23
  %8 = mul i64 %7, 1, !dbg !24
  %9 = call noalias i8* @malloc(i64 %8) #6, !dbg !25
  store i8* %9, i8** %4, align 8, !dbg !22
  call void @llvm.dbg.declare(metadata i32* %5, metadata !26, metadata !DIExpression()), !dbg !28
  store i32 0, i32* %5, align 4, !dbg !28
  br label %10, !dbg !29

10:                                               ; preds = %22, %1
  %11 = load i32, i32* %5, align 4, !dbg !30
  %12 = load i32, i32* %2, align 4, !dbg !32
  %13 = icmp slt i32 %11, %12, !dbg !33
  br i1 %13, label %14, label %25, !dbg !34

14:                                               ; preds = %10
  %15 = load i32, i32* %5, align 4, !dbg !35
  %16 = add nsw i32 %15, 48, !dbg !36
  %17 = trunc i32 %16 to i8, !dbg !35
  %18 = load i8*, i8** %4, align 8, !dbg !37
  %19 = load i32, i32* %5, align 4, !dbg !38
  %20 = sext i32 %19 to i64, !dbg !37
  %21 = getelementptr inbounds i8, i8* %18, i64 %20, !dbg !37
  store i8 %17, i8* %21, align 1, !dbg !39
  br label %22, !dbg !37

22:                                               ; preds = %14
  %23 = load i32, i32* %5, align 4, !dbg !40
  %24 = add nsw i32 %23, 1, !dbg !40
  store i32 %24, i32* %5, align 4, !dbg !40
  br label %10, !dbg !41, !llvm.loop !42

25:                                               ; preds = %10
  %26 = load i8*, i8** %4, align 8, !dbg !45
  %27 = getelementptr inbounds i8, i8* %26, i64 0, !dbg !45
  %28 = load i8, i8* %27, align 1, !dbg !45
  %29 = sext i8 %28 to i32, !dbg !45
  %30 = icmp eq i32 %29, 97, !dbg !47
  br i1 %30, label %31, label %40, !dbg !48

31:                                               ; preds = %25
  %32 = load i8*, i8** %4, align 8, !dbg !49
  %33 = load i32, i32* %2, align 4, !dbg !50
  %34 = sub nsw i32 %33, 1, !dbg !51
  %35 = sext i32 %34 to i64, !dbg !49
  %36 = getelementptr inbounds i8, i8* %32, i64 %35, !dbg !49
  %37 = load i8, i8* %36, align 1, !dbg !49
  %38 = sext i8 %37 to i32, !dbg !49
  %39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %38), !dbg !52
  br label %40, !dbg !52

40:                                               ; preds = %31, %25
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !dbg !53
  %42 = load i8*, i8** %4, align 8, !dbg !54
  %43 = call i32 (%struct._IO_FILE*, i8*, ...) @__isoc99_fscanf(%struct._IO_FILE* %41, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i8* %42), !dbg !55
  %44 = getelementptr inbounds [10 x i8], [10 x i8]* %3, i64 0, i64 0, !dbg !56
  %45 = load i8*, i8** %4, align 8, !dbg !57
  %46 = load i8*, i8** %4, align 8, !dbg !58
  %47 = call i64 @strlen(i8* %46) #7, !dbg !59
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %44, i8* align 1 %45, i64 %47, i1 false), !dbg !56
  %48 = getelementptr inbounds [10 x i8], [10 x i8]* %3, i64 0, i64 0, !dbg !60
  %49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i8* %48), !dbg !61
  ret void, !dbg !62
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #2

declare dso_local i32 @printf(i8*, ...) #3

declare dso_local i32 @__isoc99_fscanf(%struct._IO_FILE*, i8*, ...) #3

; Function Attrs: nounwind readonly willreturn
declare dso_local i64 @strlen(i8*) #4

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #5

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 !dbg !63 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !67, metadata !DIExpression()), !dbg !68
  store i8** %1, i8*** %5, align 8
  call void @llvm.dbg.declare(metadata i8*** %5, metadata !69, metadata !DIExpression()), !dbg !70
  call void @llvm.dbg.declare(metadata i32* %6, metadata !71, metadata !DIExpression()), !dbg !72
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i32* %6), !dbg !73
  %8 = load i32, i32* %6, align 4, !dbg !74
  call void @testcase(i32 %8), !dbg !75
  ret i32 0, !dbg !76
}

declare dso_local i32 @__isoc99_scanf(i8*, ...) #3

attributes #0 = { noinline nounwind optnone uwtable "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly willreturn "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nosync nounwind willreturn }
attributes #6 = { nounwind }
attributes #7 = { nounwind readonly willreturn }

!llvm.dbg.cu = !{!0}
!llvm.ident = !{!6}
!llvm.module.flags = !{!7, !8, !9}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 12.0.0 (git@github.com:salmanyam/dpp-llvm.git 83104b11554d98e0437af8ea9f3693e43ac1dcf7)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "example.c", directory: "/home/salman/DPP2/dpp-data")
!2 = !{}
!3 = !{!4}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64)
!5 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!6 = !{!"clang version 12.0.0 (git@github.com:salmanyam/dpp-llvm.git 83104b11554d98e0437af8ea9f3693e43ac1dcf7)"}
!7 = !{i32 7, !"Dwarf Version", i32 4}
!8 = !{i32 2, !"Debug Info Version", i32 3}
!9 = !{i32 1, !"wchar_size", i32 4}
!10 = distinct !DISubprogram(name: "testcase", scope: !1, file: !1, line: 5, type: !11, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!11 = !DISubroutineType(types: !12)
!12 = !{null, !13}
!13 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!14 = !DILocalVariable(name: "ts", arg: 1, scope: !10, file: !1, line: 5, type: !13)
!15 = !DILocation(line: 5, column: 19, scope: !10)
!16 = !DILocalVariable(name: "buf", scope: !10, file: !1, line: 6, type: !17)
!17 = !DICompositeType(tag: DW_TAG_array_type, baseType: !5, size: 80, elements: !18)
!18 = !{!19}
!19 = !DISubrange(count: 10)
!20 = !DILocation(line: 6, column: 11, scope: !10)
!21 = !DILocalVariable(name: "s", scope: !10, file: !1, line: 8, type: !4)
!22 = !DILocation(line: 8, column: 12, scope: !10)
!23 = !DILocation(line: 8, column: 32, scope: !10)
!24 = !DILocation(line: 8, column: 35, scope: !10)
!25 = !DILocation(line: 8, column: 25, scope: !10)
!26 = !DILocalVariable(name: "i", scope: !27, file: !1, line: 9, type: !13)
!27 = distinct !DILexicalBlock(scope: !10, file: !1, line: 9, column: 6)
!28 = !DILocation(line: 9, column: 14, scope: !27)
!29 = !DILocation(line: 9, column: 10, scope: !27)
!30 = !DILocation(line: 9, column: 19, scope: !31)
!31 = distinct !DILexicalBlock(scope: !27, file: !1, line: 9, column: 6)
!32 = !DILocation(line: 9, column: 23, scope: !31)
!33 = !DILocation(line: 9, column: 21, scope: !31)
!34 = !DILocation(line: 9, column: 6, scope: !27)
!35 = !DILocation(line: 9, column: 39, scope: !31)
!36 = !DILocation(line: 9, column: 41, scope: !31)
!37 = !DILocation(line: 9, column: 32, scope: !31)
!38 = !DILocation(line: 9, column: 34, scope: !31)
!39 = !DILocation(line: 9, column: 37, scope: !31)
!40 = !DILocation(line: 9, column: 28, scope: !31)
!41 = !DILocation(line: 9, column: 6, scope: !31)
!42 = distinct !{!42, !34, !43, !44}
!43 = !DILocation(line: 9, column: 43, scope: !27)
!44 = !{!"llvm.loop.mustprogress"}
!45 = !DILocation(line: 11, column: 10, scope: !46)
!46 = distinct !DILexicalBlock(scope: !10, file: !1, line: 11, column: 10)
!47 = !DILocation(line: 11, column: 14, scope: !46)
!48 = !DILocation(line: 11, column: 10, scope: !10)
!49 = !DILocation(line: 11, column: 36, scope: !46)
!50 = !DILocation(line: 11, column: 38, scope: !46)
!51 = !DILocation(line: 11, column: 40, scope: !46)
!52 = !DILocation(line: 11, column: 21, scope: !46)
!53 = !DILocation(line: 13, column: 13, scope: !10)
!54 = !DILocation(line: 13, column: 26, scope: !10)
!55 = !DILocation(line: 13, column: 6, scope: !10)
!56 = !DILocation(line: 14, column: 6, scope: !10)
!57 = !DILocation(line: 14, column: 18, scope: !10)
!58 = !DILocation(line: 14, column: 28, scope: !10)
!59 = !DILocation(line: 14, column: 21, scope: !10)
!60 = !DILocation(line: 15, column: 21, scope: !10)
!61 = !DILocation(line: 15, column: 6, scope: !10)
!62 = !DILocation(line: 16, column: 2, scope: !10)
!63 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 18, type: !64, scopeLine: 18, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!64 = !DISubroutineType(types: !65)
!65 = !{!13, !13, !66}
!66 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!67 = !DILocalVariable(name: "argc", arg: 1, scope: !63, file: !1, line: 18, type: !13)
!68 = !DILocation(line: 18, column: 15, scope: !63)
!69 = !DILocalVariable(name: "argv", arg: 2, scope: !63, file: !1, line: 18, type: !66)
!70 = !DILocation(line: 18, column: 28, scope: !63)
!71 = !DILocalVariable(name: "size", scope: !63, file: !1, line: 19, type: !13)
!72 = !DILocation(line: 19, column: 10, scope: !63)
!73 = !DILocation(line: 20, column: 6, scope: !63)
!74 = !DILocation(line: 21, column: 15, scope: !63)
!75 = !DILocation(line: 21, column: 6, scope: !63)
!76 = !DILocation(line: 23, column: 6, scope: !63)
