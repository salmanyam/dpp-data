
Address sanitizer running...
PLEASE submit a bug report to https://bugs.llvm.org/ and include the crash backtrace, preprocessed source, and associated run script.
Stack dump:
0.	Program arguments: /home/salman/DPP/dpp-llvm/build/bin/clang++ -O1 -g -fsanitize=address -mllvm --asan-dpp=true -mllvm --dpp-rule=all -x ir -c ./binutils-2.15/binutils/strings.bc -o ./binutils-2.15/binutils/strings.o
1.	Optimizer
 #0 0x0000560f6adc5f41 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/home/salman/DPP/dpp-llvm/build/bin/clang+++0x315af41)
 #1 0x0000560f6adc3d04 llvm::sys::RunSignalHandlers() (/home/salman/DPP/dpp-llvm/build/bin/clang+++0x3158d04)
 #2 0x0000560f6adc3fa1 llvm::sys::CleanupOnSignal(unsigned long) (/home/salman/DPP/dpp-llvm/build/bin/clang+++0x3158fa1)
 #3 0x0000560f6ad2caf8 CrashRecoverySignalHandler(int) (/home/salman/DPP/dpp-llvm/build/bin/clang+++0x30c1af8)
 #4 0x00007f0b32160420 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x14420)
 #5 0x0000560f68afa054 SVF::VFG::addRetEdge(unsigned int, unsigned int, unsigned int) (.cold) (/home/salman/DPP/dpp-llvm/build/bin/clang+++0xe8f054)
 #6 0x0000560f6dbe5c0b SVF::SVFGOPT::connectFRetAndARet(SVF::PAGNode const*, SVF::PAGNode const*, unsigned int, std::set<SVF::VFGEdge*, SVF::GenericEdge<SVF::VFGNode>::equalGEdge, std::allocator<SVF::VFGEdge*> >&) (/home/salman/DPP/dpp-llvm/build/bin/clang+++0x5f7ac0b)
 #7 0x0000560f6dbf4722 SVF::VFG::connectCallerAndCallee(SVF::CallBlockNode const*, SVF::SVFFunction const*, std::set<SVF::VFGEdge*, SVF::GenericEdge<SVF::VFGNode>::equalGEdge, std::allocator<SVF::VFGEdge*> >&) (/home/salman/DPP/dpp-llvm/build/bin/clang+++0x5f89722)
 #8 0x0000560f6dbe0243 SVF::SVFG::connectCallerAndCallee(SVF::CallBlockNode const*, SVF::SVFFunction const*, std::set<SVF::VFGEdge*, SVF::GenericEdge<SVF::VFGNode>::equalGEdge, std::allocator<SVF::VFGEdge*> >&) (/home/salman/DPP/dpp-llvm/build/bin/clang+++0x5f75243)
 #9 0x0000560f6dbbf41f SVF::FlowSensitive::connectCallerAndCallee(std::map<SVF::CallBlockNode const*, std::unordered_set<SVF::SVFFunction const*, SVF::Hash<SVF::SVFFunction const*>, std::equal_to<SVF::SVFFunction const*>, std::allocator<SVF::SVFFunction const*> >, std::less<SVF::CallBlockNode const*>, std::allocator<std::pair<SVF::CallBlockNode const* const, std::unordered_set<SVF::SVFFunction const*, SVF::Hash<SVF::SVFFunction const*>, std::equal_to<SVF::SVFFunction const*>, std::allocator<SVF::SVFFunction const*> > > > > const&, std::set<SVF::VFGEdge*, SVF::GenericEdge<SVF::VFGNode>::equalGEdge, std::allocator<SVF::VFGEdge*> >&) (/home/salman/DPP/dpp-llvm/build/bin/clang+++0x5f5441f)
#10 0x0000560f6dbc0c34 SVF::FlowSensitive::updateCallGraph(std::map<SVF::CallBlockNode const*, unsigned int, std::less<SVF::CallBlockNode const*>, std::allocator<std::pair<SVF::CallBlockNode const* const, unsigned int> > > const&) (/home/salman/DPP/dpp-llvm/build/bin/clang+++0x5f55c34)
#11 0x0000560f6dbc4ae2 SVF::FlowSensitive::analyze() (/home/salman/DPP/dpp-llvm/build/bin/clang+++0x5f59ae2)
#12 0x0000560f6dae409f llvm::DPP::SVFInitPass::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/home/salman/DPP/dpp-llvm/build/bin/clang+++0x5e7909f)
#13 0x0000560f6be151cd llvm::detail::AnalysisPassModel<llvm::Module, llvm::DPP::SVFInitPass, llvm::PreservedAnalyses, llvm::AnalysisManager<llvm::Module>::Invalidator>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/home/salman/DPP/dpp-llvm/build/bin/clang+++0x41aa1cd)
#14 0x0000560f6a5bb92f llvm::AnalysisManager<llvm::Module>::getResultImpl(llvm::AnalysisKey*, llvm::Module&) (/home/salman/DPP/dpp-llvm/build/bin/clang+++0x295092f)
#15 0x0000560f6daecffa llvm::DPP::DPPAnalysis::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/home/salman/DPP/dpp-llvm/build/bin/clang+++0x5e81ffa)
#16 0x0000560f6be150ff llvm::detail::AnalysisPassModel<llvm::Module, llvm::DPP::DPPAnalysis, llvm::PreservedAnalyses, llvm::AnalysisManager<llvm::Module>::Invalidator>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/home/salman/DPP/dpp-llvm/build/bin/clang+++0x41aa0ff)
#17 0x0000560f6a5bb92f llvm::AnalysisManager<llvm::Module>::getResultImpl(llvm::AnalysisKey*, llvm::Module&) (/home/salman/DPP/dpp-llvm/build/bin/clang+++0x295092f)
#18 0x0000560f6a941d22 llvm::ModuleAddressSanitizerPass::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/home/salman/DPP/dpp-llvm/build/bin/clang+++0x2cd6d22)
#19 0x0000560f6b099ab6 llvm::detail::PassModel<llvm::Module, llvm::ModuleAddressSanitizerPass, llvm::PreservedAnalyses, llvm::AnalysisManager<llvm::Module> >::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/home/salman/DPP/dpp-llvm/build/bin/clang+++0x342eab6)
#20 0x0000560f6a5bc192 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module> >::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/home/salman/DPP/dpp-llvm/build/bin/clang+++0x2951192)
#21 0x0000560f6b0a47a0 (anonymous namespace)::EmitAssemblyHelper::EmitAssemblyWithNewPassManager(clang::BackendAction, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream> >) (.constprop.0) (/home/salman/DPP/dpp-llvm/build/bin/clang+++0x34397a0)
#22 0x0000560f6b0a6d60 clang::EmitBackendOutput(clang::DiagnosticsEngine&, clang::HeaderSearchOptions const&, clang::CodeGenOptions const&, clang::TargetOptions const&, clang::LangOptions const&, llvm::DataLayout const&, llvm::Module*, clang::BackendAction, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream> >) (/home/salman/DPP/dpp-llvm/build/bin/clang+++0x343bd60)
#23 0x0000560f6bdab844 clang::CodeGenAction::ExecuteAction() (/home/salman/DPP/dpp-llvm/build/bin/clang+++0x4140844)
#24 0x0000560f6b705151 clang::FrontendAction::Execute() (/home/salman/DPP/dpp-llvm/build/bin/clang+++0x3a9a151)
#25 0x0000560f6b6a255b clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) (/home/salman/DPP/dpp-llvm/build/bin/clang+++0x3a3755b)
#26 0x0000560f6b7d6fe0 clang::ExecuteCompilerInvocation(clang::CompilerInstance*) (/home/salman/DPP/dpp-llvm/build/bin/clang+++0x3b6bfe0)
#27 0x0000560f68bbba81 cc1_main(llvm::ArrayRef<char const*>, char const*, void*) (/home/salman/DPP/dpp-llvm/build/bin/clang+++0xf50a81)
#28 0x0000560f68bb904b ExecuteCC1Tool(llvm::SmallVectorImpl<char const*>&) (/home/salman/DPP/dpp-llvm/build/bin/clang+++0xf4e04b)
#29 0x0000560f6b548939 void llvm::function_ref<void ()>::callback_fn<clang::driver::CC1Command::Execute(llvm::ArrayRef<llvm::Optional<llvm::StringRef> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, bool*) const::'lambda'()>(long) (/home/salman/DPP/dpp-llvm/build/bin/clang+++0x38dd939)
#30 0x0000560f6ad2cbf7 llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) (/home/salman/DPP/dpp-llvm/build/bin/clang+++0x30c1bf7)
#31 0x0000560f6b549436 clang::driver::CC1Command::Execute(llvm::ArrayRef<llvm::Optional<llvm::StringRef> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, bool*) const (.part.0) (/home/salman/DPP/dpp-llvm/build/bin/clang+++0x38de436)
#32 0x0000560f6b51d8cc clang::driver::Compilation::ExecuteCommand(clang::driver::Command const&, clang::driver::Command const*&) const (/home/salman/DPP/dpp-llvm/build/bin/clang+++0x38b28cc)
#33 0x0000560f6b51e2e9 clang::driver::Compilation::ExecuteJobs(clang::driver::JobList const&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*> >&) const (/home/salman/DPP/dpp-llvm/build/bin/clang+++0x38b32e9)
#34 0x0000560f6b529a21 clang::driver::Driver::ExecuteCompilation(clang::driver::Compilation&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*> >&) (/home/salman/DPP/dpp-llvm/build/bin/clang+++0x38bea21)
#35 0x0000560f68afce7a main (/home/salman/DPP/dpp-llvm/build/bin/clang+++0xe91e7a)
#36 0x00007f0b319ed083 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24083)
#37 0x0000560f68bb8bde _start (/home/salman/DPP/dpp-llvm/build/bin/clang+++0xf4dbde)
clang-12: error: clang frontend command failed with exit code 139 (use -v to see invocation)
clang version 12.0.0 (git@github.com:salmanyam/dpp-llvm.git bb559f9657eb1e2f41a1524ed41b3a86c9425f3a)
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /home/salman/DPP/dpp-llvm/build/bin
clang-12: note: diagnostic msg: Error generating preprocessed source(s) - no preprocessable inputs.
rm: cannot remove './binutils-2.15/binutils/strings.o': No such file or directory
